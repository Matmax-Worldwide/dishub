generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id               String    @id @default(cuid())
  email            String    @unique
  password         String?
  firstName        String?
  lastName         String?
  phoneNumber      String?
  profileImageUrl  String?
  isActive         Boolean   @default(true)
  emailVerified    DateTime?
  emailVerifiedAt  DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  roleId           String?
  role             RoleModel?           @relation(fields: [roleId], references: [id])
  accounts         Account[]
  sessions         Session[]
  documents        Document[]
  projects         Project[]
  appointments     Appointment[]
  tasksAssigned    Task[]               @relation("TaskAssignee")
  tasksCreated     Task[]               @relation("TaskCreator")
  timeEntries      TimeEntry[]
  notifications    Notification[]
  performances     Performance[]
  settings         UserSettings?
  employee         Employee?
  shops            Shop[]
  bookings         Booking[]
  staffProfile     StaffProfile?
  orders           Order[]              @relation("CustomerOrders")
  clients          Client[]
  posts            Post[]
  reviews          Review[]             // Customer reviews
  reviewResponses  ReviewResponse[]     // Admin responses to reviews

  @@index([email])
  @@index([roleId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Document {
  id          String         @id @default(cuid())
  title       String
  description String?
  fileUrl     String?
  status      DocumentStatus @default(DRAFT)
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id           String        @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects     Project[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  clientId    String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  client      Client?       @relation(fields: [clientId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  timeEntries TimeEntry[]
}

model Appointment {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  isVirtual   Boolean  @default(false)
  meetingUrl  String?
  userId      String
  clientId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      Client?  @relation(fields: [clientId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model TimeEntry {
  id          String   @id @default(cuid())
  date        String
  hours       Float
  description String
  userId      String
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project? @relation(fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model ContactFormSubmission {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  createdAt DateTime @default(now())
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}




model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(NOT_STARTED)
  dueDate     DateTime?
  priority    Int        @default(1)
  assigneeId  String
  creatorId   String
  projectId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assignee    User       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id])
  project     Project?   @relation(fields: [projectId], references: [id])
}


model Notification {
  id              String           @id @default(cuid())
  type            NotificationType
  title           String
  message         String
  isRead          Boolean          @default(false)
  userId          String
  relatedItemId   String?
  relatedItemType String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Performance {
  id             String   @id @default(cuid())
  userId         String
  period         String
  completedTasks Int
  totalHours     Float
  efficiency     Float?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  theme              String   @default("light")
  language           String   @default("en")
  timeFormat         String   @default("12h")
  dateFormat         String   @default("MM/DD/YYYY")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HelpArticle {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id                String  @id @default(cuid())
  name              String
  defaultCurrencyId String
  adminUserId       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  defaultCurrency    Currency                 @relation("ShopDefaultCurrency", fields: [defaultCurrencyId], references: [id])
  acceptedCurrencies ShopAcceptedCurrencies[] // Relation to the explicit join table

  adminUser         User?             @relation(fields: [adminUserId], references: [id])
  locations         Location[]
  products          Product[]
  productCategories ProductCategory[]
  taxes             Tax[] // A shop can have specific taxes
  orders            Order[]

  // @@index([adminUserId]) // Optional: if querying shops by admin user is frequent
  @@index([defaultCurrencyId])
}

model ShopAcceptedCurrencies {
  shopId     String
  currencyId String

  shop     Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  currency Currency @relation("ShopAcceptedCurrencies", fields: [currencyId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now()) // Optional: to track when a currency was added to a shop

  @@id([shopId, currencyId])
  @@index([currencyId]) // Index for querying shops by accepted currency
}

model Tax {
  id          String  @id @default(cuid())
  name        String // e.g., "VAT", "Sales Tax"
  rate        Float // e.g., 0.07 for 7%
  isInclusive Boolean @default(false) // Tax is included in the price
  country     String? // For regional taxes
  region      String? // Optional, sub-division of country
  isGlobal    Boolean @default(false) // Applies to all shops/products unless overridden
  shopId      String? // Optional, if a tax is specific to a shop

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop       Shop?      @relation(fields: [shopId], references: [id])
  priceTaxes PriceTax[] // Relation to the explicit join table for prices

  @@index([shopId])
  @@index([isGlobal])
  @@index([country])
}

model Product {
  id            String  @id @default(cuid())
  name          String
  description   String?
  sku           String? @unique
  stockQuantity Int?
  shopId        String
  categoryId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop       Shop             @relation(fields: [shopId], references: [id])
  category   ProductCategory? @relation(fields: [categoryId], references: [id])
  prices     Price[]          // Relation to its prices in different currencies
  orderItems OrderItem[]
  reviews    Review[]         // Product reviews

  @@index([shopId])
  @@index([categoryId])
}

model ProductCategory {
  id          String  @id @default(cuid())
  name        String
  description String?
  slug        String  @unique
  parentId    String?
  isActive    Boolean @default(true)
  shopId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop            Shop?             @relation(fields: [shopId], references: [id])
  parent          ProductCategory?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children        ProductCategory[] @relation("CategoryToParent")
  products        Product[]

  @@index([shopId])
  @@index([parentId])
  @@index([slug])
}

model Price {
  id               String  @id @default(cuid())
  amount           Float
  currencyId       String
  productId        String?
  serviceId        String?
  priceIncludesTax Boolean @default(false) // Indicates if 'amount' already includes 'isInclusive' taxes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currency   Currency   @relation(fields: [currencyId], references: [id])
  product    Product?   @relation(fields: [productId], references: [id], onDelete: Cascade) // Cascade delete if product is removed
  service    Service?   @relation(fields: [serviceId], references: [id], onDelete: Cascade) // Cascade delete if service is removed
  priceTaxes PriceTax[] // Relation to the explicit join table for taxes

  @@index([currencyId])
  @@index([productId])
  @@index([serviceId])
}

model PriceTax {
  priceId   String
  taxId     String
  appliedAt DateTime @default(now()) // Optional: to track when a tax was associated with a price

  price Price @relation(fields: [priceId], references: [id], onDelete: Cascade)
  tax   Tax   @relation(fields: [taxId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) // It's good practice for join tables too
  updatedAt DateTime @updatedAt // Though less frequently updated

  @@id([priceId, taxId])
  @@index([taxId]) // Index on taxId can be useful for finding all prices with a specific tax
}

model RoleModel {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  permissions Permission[] @relation("PermissionToRoleModel")

  @@map("RoleTable")
}

model Permission {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  roles       RoleModel[] @relation("PermissionToRoleModel")
}

model ExternalLink {
  id           String            @id @default(cuid())
  name         String
  url          String
  icon         String
  description  String?
  isActive     Boolean           @default(true)
  order        Int               @default(0)
  createdBy    String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  accessType   AccessControlType @default(PUBLIC)
  allowedRoles String[]          @default([])
  allowedUsers String[]          @default([])
  deniedUsers  String[]          @default([])
}

model Employee {
  id               String              @id @default(cuid())
  employeeId       String              @unique
  userId           String              @unique
  dateOfBirth      DateTime?
  gender           String?
  maritalStatus    String?
  nationality      String?
  address          String?
  emergencyContact String?
  hireDate         DateTime
  terminationDate  DateTime?
  status           EmployeeStatus      @default(ACTIVE)
  departmentId     String
  positionId       String
  managerId        String?
  salary           Float
  bankInfo         String?
  taxInfo          String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  attendances      Attendance[]
  department       Department          @relation(fields: [departmentId], references: [id])
  manager          Employee?           @relation("EmployeeToManager", fields: [managerId], references: [id])
  subordinates     Employee[]          @relation("EmployeeToManager")
  position         Position            @relation(fields: [positionId], references: [id])
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  benefits         EmployeeBenefit[]
  documents        EmployeeDocument[]
  trainings        EmployeeTraining[]
  leaves           Leave[]
  payrolls         Payroll[]
  performances     PerformanceReview[]
}

model Department {
  id          String     @id @default(cuid())
  name        String
  description String?
  managerId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]
}

model Position {
  id               String     @id @default(cuid())
  title            String
  description      String?
  salaryRangeMin   Float?
  salaryRangeMax   Float?
  isRemoteEligible Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  employees        Employee[]
}

model Attendance {
  id         String    @id @default(cuid())
  employeeId String
  date       DateTime
  timeIn     DateTime
  timeOut    DateTime?
  status     String
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee  @relation(fields: [employeeId], references: [id])
}

model Leave {
  id           String        @id @default(cuid())
  employeeId   String
  leaveType    LeaveType
  startDate    DateTime
  endDate      DateTime
  totalDays    Float
  reason       String?
  status       RequestStatus @default(PENDING)
  attachments  String?
  approvedById String?
  approvedAt   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  employee     Employee      @relation(fields: [employeeId], references: [id])
}

model Benefit {
  id                String            @id @default(cuid())
  name              String
  description       String?
  type              BenefitType
  eligibilityMonths Int               @default(0)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  employeeBenefits  EmployeeBenefit[]
}

model EmployeeBenefit {
  id         String        @id @default(cuid())
  employeeId String
  benefitId  String
  startDate  DateTime
  endDate    DateTime?
  status     RequestStatus @default(ACTIVE)
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  benefit    Benefit       @relation(fields: [benefitId], references: [id])
  employee   Employee      @relation(fields: [employeeId], references: [id])
}

model PerformanceReview {
  id                 String       @id @default(cuid())
  employeeId         String
  reviewerId         String
  reviewDate         DateTime
  reviewPeriodStart  DateTime
  reviewPeriodEnd    DateTime
  performanceScore   Float
  qualityScore       Float
  attendanceScore    Float
  communicationScore Float
  leadershipScore    Float?
  strengths          String?
  areasToImprove     String?
  goals              String?
  comments           String?
  employeeComments   String?
  status             ReviewStatus @default(DRAFT)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  employee           Employee     @relation(fields: [employeeId], references: [id])
}

model EmployeeDocument {
  id           String       @id @default(cuid())
  employeeId   String
  title        String
  description  String?
  documentUrl  String
  documentType DocumentType
  expiryDate   DateTime?
  isVerified   Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  employee     Employee     @relation(fields: [employeeId], references: [id])
}

model Training {
  id           String             @id @default(cuid())
  title        String
  description  String?
  type         TrainingType
  duration     Int
  durationUnit String
  provider     String?
  cost         Float?
  isRequired   Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  employees    EmployeeTraining[]
}

model EmployeeTraining {
  id             String         @id @default(cuid())
  employeeId     String
  trainingId     String
  startDate      DateTime
  completionDate DateTime?
  status         TrainingStatus @default(ASSIGNED)
  score          Float?
  certificate    String?
  feedback       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  employee       Employee       @relation(fields: [employeeId], references: [id])
  training       Training       @relation(fields: [trainingId], references: [id])
}

model HolidayCalendar {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  description String?
  isRecurring Boolean  @default(false)
  country     String?
  region      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payroll {
  id            String        @id @default(cuid())
  employeeId    String
  periodStart   DateTime
  periodEnd     DateTime
  basicSalary   Float
  overtime      Float?
  bonus         Float?
  allowances    Float?
  deductions    Float?
  taxes         Float?
  netSalary     Float
  paymentDate   DateTime?
  paymentMethod String?
  status        PayrollStatus @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  employee      Employee      @relation(fields: [employeeId], references: [id])
}

model Page {
  id              String       @id @default(cuid())
  title           String
  slug            String       @unique
  description     String?
  isPublished     Boolean      @default(false)
  publishDate     DateTime?
  featuredImage   String?
  metaTitle       String?
  metaDescription String?
  createdById     String
  updatedById     String?
  parentId        String?
  order           Int          @default(0)
  pageType        PageType     @default(CONTENT)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  locale          String       @default("en")
  template        String       @default("default")
  isDefault       Boolean      @default(false)
  forms           Form[]
  menuItems       MenuItem[]
  parent          Page?        @relation("PageToPage", fields: [parentId], references: [id])
  children        Page[]       @relation("PageToPage")
  seo             PageSEO?
  sections        CMSSection[] @relation("PageToSection")
}

model CMSSection {
  id              String             @id @default(cuid())
  sectionId       String             @unique
  lastUpdated     DateTime           @default(now())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  createdBy       String?
  description     String?
  name            String?
  backgroundImage String?
  backgroundType  String?            @default("gradient")
  gridDesign      String?            @default("basic")
  components      SectionComponent[]
  pages           Page[]             @relation("PageToSection")
  media           Media[]
  order           Int                @default(0)

  @@map("CMSSection")
}

model Media {
  id              String      @id @default(cuid())
  title           String?
  description     String?
  fileUrl         String
  fileName        String
  fileSize        Int?
  fileType        String?
  altText         String?
  cmsSectionId    String?
  uploadedById    String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  cmsSection      CMSSection? @relation(fields: [cmsSectionId], references: [id])
  posts           Post[]      @relation("PostMedia")
  featuredInPosts Post[]      @relation("PostFeaturedImage")
}

model PageSEO {
  id                 String   @id @default(cuid())
  pageId             String   @unique
  title              String?
  description        String?
  keywords           String?
  ogTitle            String?
  ogDescription      String?
  ogImage            String?
  twitterTitle       String?
  twitterDescription String?
  twitterImage       String?
  canonicalUrl       String?
  structuredData     Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  page               Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Menu {
  id          String       @id @default(cuid())
  name        String       @unique
  location    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  headerStyle HeaderStyle?
  footerStyle FooterStyle?
  items       MenuItem[]
}

model MenuItem {
  id        String     @id @default(cuid())
  menuId    String
  parentId  String?
  title     String
  url       String?
  pageId    String?
  target    String?    @default("_self")
  icon      String?
  order     Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  menu      Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  page      Page?      @relation(fields: [pageId], references: [id])
  parent    MenuItem?  @relation("MenuItemToMenuItem", fields: [parentId], references: [id])
  children  MenuItem[] @relation("MenuItemToMenuItem")
}

model SiteSettings {
  id                String   @id @default(cuid())
  siteName          String
  siteDescription   String?
  logoUrl           String?
  faviconUrl        String?
  primaryColor      String?
  secondaryColor    String?
  googleAnalyticsId String?
  facebookPixelId   String?
  customCss         String?
  customJs          String?
  contactEmail      String?
  contactPhone      String?
  address           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  accentColor       String?
  defaultLocale     String   @default("en")
  footerText        String?
  maintenanceMode   Boolean  @default(false)
  metaDescription   String?
  metaTitle         String?
  ogImage           String?
  socialLinks       Json?
  supportedLocales  String[] @default(["en"])
  twitterCardType   String?  @default("summary_large_image")
  twitterHandle     String?
}

model UserPermission {
  id             String   @id @default(cuid())
  userId         String
  permissionName String
  granted        Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, permissionName])
  @@index([userId])
  @@index([permissionName])
}

model Collection {
  id          String            @id @default(cuid())
  name        String            @unique
  slug        String            @unique
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  documents   CMSDocument[]
  fields      CollectionField[]
}

model CollectionField {
  id           String     @id @default(cuid())
  collectionId String
  name         String
  label        String
  type         FieldType
  required     Boolean    @default(false)
  localized    Boolean    @default(false)
  isUnique     Boolean    @default(false)
  defaultValue Json?
  options      Json?
  order        Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, name])
}

model CMSDocument {
  id           String     @id @default(cuid())
  collectionId String
  data         Json
  locale       String     @default("en")
  isPublished  Boolean    @default(false)
  publishedAt  DateTime?
  createdById  String
  updatedById  String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])
}

model CMSTemplate {
  id          String         @id @default(cuid())
  name        String         @unique
  slug        String         @unique
  description String?
  structure   Json?
  thumbnail   String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  components  CMSComponent[]
}

model CMSComponent {
  id               String             @id @default(cuid())
  name             String             @unique
  slug             String             @unique
  description      String?
  icon             String?
  category         String?
  schema           Json
  preview          String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  templateId       String?
  template         CMSTemplate?       @relation(fields: [templateId], references: [id])
  sectionInstances SectionComponent[]
}

model SectionComponent {
  id          String       @id @default(cuid())
  sectionId   String
  componentId String
  order       Int          @default(0)
  data        Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  component   CMSComponent @relation(fields: [componentId], references: [id])
  section     CMSSection   @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, componentId, order])
  @@map("SectionComponent")
}

model NavigationMenu {
  id          String               @id @default(cuid())
  name        String               @unique
  description String?
  location    String?
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  items       NavigationMenuItem[]
}

model NavigationMenuItem {
  id           String               @id @default(cuid())
  menuId       String
  parentId     String?
  label        String
  href         String?
  pageId       String?
  documentId   String?
  collectionId String?
  target       String?              @default("_self")
  icon         String?
  order        Int                  @default(0)
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  menu         NavigationMenu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  parent       NavigationMenuItem?  @relation("NavigationMenuItemToItem", fields: [parentId], references: [id])
  children     NavigationMenuItem[] @relation("NavigationMenuItemToItem")
}

model HeaderStyle {
  id                 String   @id @default(cuid())
  menuId             String   @unique
  transparency       Int      @default(0)
  headerSize         String   @default("md")
  menuAlignment      String   @default("right")
  menuButtonStyle    String   @default("default")
  mobileMenuStyle    String   @default("dropdown")
  mobileMenuPosition String   @default("right")
  transparentHeader  Boolean  @default(false)
  borderBottom       Boolean  @default(false)
  fixedHeader        Boolean  @default(false)
  advancedOptions    Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  menu               Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
}

model FooterStyle {
  id              String   @id @default(cuid())
  transparency    Int?     @default(0)
  columnLayout    String?  @default("grid")
  socialAlignment String?  @default("left")
  borderTop       Boolean? @default(false)
  alignment       String?  @default("left")
  padding         String?  @default("medium")
  width           String?  @default("container")
  advancedOptions Json?

  menuId String @unique
  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Form {
  id                String           @id @default(cuid())
  title             String
  description       String?
  slug              String           @unique
  isMultiStep       Boolean          @default(false)
  isActive          Boolean          @default(true)
  successMessage    String?
  redirectUrl       String?
  submitButtonText  String           @default("Submit")
  submitButtonStyle String?
  layout            String?
  styling           Json?
  pageId            String?
  createdById       String
  updatedById       String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  page              Page?            @relation(fields: [pageId], references: [id])
  fields            FormField[]
  steps             FormStep[]
  submissions       FormSubmission[]
}

model FormStep {
  id              String      @id @default(cuid())
  formId          String
  title           String
  description     String?
  order           Int         @default(0)
  isVisible       Boolean     @default(true)
  validationRules Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  fields          FormField[]
  form            Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
}

model FormField {
  id              String        @id @default(cuid())
  formId          String?
  stepId          String?
  label           String
  name            String
  type            FormFieldType
  placeholder     String?
  defaultValue    String?
  helpText        String?
  isRequired      Boolean       @default(false)
  order           Int           @default(0)
  options         Json?
  validationRules Json?
  styling         Json?
  width           Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  form            Form?         @relation(fields: [formId], references: [id], onDelete: Cascade)
  step            FormStep?     @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model FormSubmission {
  id        String           @id @default(cuid())
  formId    String
  data      Json
  metadata  Json?
  status    SubmissionStatus @default(RECEIVED)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  form      Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
}

enum FieldType {
  TEXT
  TEXTAREA
  RICHTEXT
  NUMBER
  BOOLEAN
  DATE
  DATETIME
  IMAGE
  FILE
  RELATION
  JSON
  COLOR
  SELECT
  MULTISELECT
  EMAIL
  URL
  PASSWORD
}

enum DocumentStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum NotificationType {
  DOCUMENT
  TASK
  APPOINTMENT
  SYSTEM
}

enum EmployeeStatus {
  ACTIVE
  PROBATION
  LEAVE
  SUSPENDED
  TERMINATED
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  UNPAID
  BEREAVEMENT
  STUDY
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
  CANCELLED
}

enum ReviewStatus {
  DRAFT
  SUBMITTED
  ACKNOWLEDGED
  COMPLETED
}

enum DocumentType {
  IDENTITY
  EDUCATION
  CERTIFICATE
  CONTRACT
  VISA
  OTHER
}

enum TrainingType {
  ONBOARDING
  TECHNICAL
  SOFT_SKILLS
  COMPLIANCE
  LEADERSHIP
  SAFETY
  OTHER
}

enum TrainingStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum BenefitType {
  HEALTH_INSURANCE
  LIFE_INSURANCE
  PENSION
  MEAL_ALLOWANCE
  TRANSPORTATION
  EDUCATION
  WELLNESS
  CHILDCARE
  OTHER
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
  CANCELLED
}

enum PageType {
  HOME
  CONTENT
  BLOG
  LANDING
  CONTACT
  SERVICES
  ABOUT
  CUSTOM
}

enum ComponentType {
  HERO
  TEXT
  IMAGE
  GALLERY
  VIDEO
  FORM
  CARDS
  TESTIMONIALS
  CTA
  FAQ
  FEATURES
  PRICING
  TEAM
  BENEFITS
  CONTACT
  SERVICES
  CUSTOM
  FORM_BUILDER
}

enum AccessControlType {
  PUBLIC
  ROLES
  USERS
  MIXED
}

enum FormFieldType {
  TEXT
  TEXTAREA
  EMAIL
  PASSWORD
  NUMBER
  PHONE
  DATE
  TIME
  DATETIME
  SELECT
  MULTISELECT
  RADIO
  CHECKBOX
  TOGGLE
  SLIDER
  RATING
  FILE
  HIDDEN
  HEADING
  PARAGRAPH
  DIVIDER
  SPACER
  HTML
  CAPTCHA
  SIGNATURE
  AUTOCOMPLETE
  ADDRESS
}

enum SubmissionStatus {
  RECEIVED
  PROCESSING
  COMPLETED
  REJECTED
  SPAM
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   @unique
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model Post {
  id            String  @id @default(cuid())
  title         String
  slug          String  @unique
  content       String  @db.Text
  excerpt       String?
  featuredImage String?

  featuredImageId    String?
  status             PostStatus @default(DRAFT)
  publishedAt        DateTime?
  blogId             String
  authorId           String
  metaTitle          String?
  metaDescription    String?
  tags               String[]
  categories         String[]
  readTime           Int?       @default(0)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  blog               Blog       @relation(fields: [blogId], references: [id])
  author             User       @relation(fields: [authorId], references: [id])
  featuredImageMedia Media?     @relation("PostFeaturedImage", fields: [featuredImageId], references: [id])
  media              Media[]    @relation("PostMedia")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// --------------- BOOKING MODULE ENUMS ---------------
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
}

enum CommunicationMethod {
  EMAIL
  SMS
  PHONE
  WHATSAPP
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ScheduleType {
  REGULAR_HOURS
  OVERRIDE_HOURS
  BREAK
  TIME_OFF
  SPECIAL_EVENT
  BLACKOUT_DATE
}

// --------------- END BOOKING MODULE ENUMS ---------------

// --------------- BOOKING MODULE MODELS ---------------
model Location {
  id             String   @id @default(cuid())
  name           String
  address        String?
  phone          String?
  operatingHours Json? // Example: { "MONDAY": { "open": "09:00", "close": "17:00", "isClosed": false }, ... }
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  shopId String?
  shop   Shop?   @relation(fields: [shopId], references: [id])

  services         LocationService[]
  staffAssignments StaffLocationAssignment[]
  bookings         Booking[]
  schedules        StaffSchedule[] // Staff schedules specific to this location
  bookingRules     BookingRule[] // Booking rules specific to this location

  @@index([shopId])
}

model ServiceCategory {
  id           String   @id @default(cuid())
  name         String   @unique // Added unique constraint based on common practice for category names
  description  String?
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  services        Service[]
  parentId        String?
  parentCategory  ServiceCategory?  @relation("ServiceCategoryToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childCategories ServiceCategory[] @relation("ServiceCategoryToParent")

  @@map("ServiceCategories")
}

model Service {
  id                         String   @id @default(cuid())
  name                       String
  description                String?
  durationMinutes            Int
  // price                      Float // This field is being removed
  bufferTimeBeforeMinutes    Int      @default(0)
  bufferTimeAfterMinutes     Int      @default(0)
  preparationTimeMinutes     Int      @default(0)
  cleanupTimeMinutes         Int      @default(0)
  maxDailyBookingsPerService Int?
  isActive                   Boolean  @default(true)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  serviceCategoryId String
  serviceCategory   ServiceCategory @relation(fields: [serviceCategoryId], references: [id])

  locations LocationService[]
  staff     StaffService[]
  bookings  Booking[]
  prices    Price[] // This field is being added
}

model StaffProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?
  specializations String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  schedules           StaffSchedule[]
  assignedServices    StaffService[]
  locationAssignments StaffLocationAssignment[]
  bookings            Booking[]                 @relation("StaffBookings")
}

model StaffSchedule {
  id             String       @id @default(cuid())
  staffProfileId String
  staffProfile   StaffProfile @relation(fields: [staffProfileId], references: [id], onDelete: Cascade)

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)

  date      DateTime?
  dayOfWeek DayOfWeek?

  startTime String // Format "HH:MM"
  endTime   String // Format "HH:MM"

  scheduleType ScheduleType
  isAvailable  Boolean      @default(true)
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([staffProfileId, date])
  @@index([staffProfileId, dayOfWeek])
}

model Booking {
  id         String @id @default(cuid())
  customerId String
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  staffProfileId String?
  staffProfile   StaffProfile? @relation("StaffBookings", fields: [staffProfileId], references: [id], onDelete: SetNull)

  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  bookingDate     DateTime
  startTime       DateTime
  endTime         DateTime
  durationMinutes Int

  status BookingStatus @default(PENDING)
  notes  String?

  communicationPreferences CommunicationMethod[] @default([])
  reminderSentAt           DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([customerId])
  @@index([serviceId])
  @@index([staffProfileId])
  @@index([locationId])
  @@index([bookingDate])
  @@index([startTime])
}

model BookingRule {
  id         String  @id @default(cuid())
  locationId String? @unique
  // serviceId  String? // Potentially rules per service too

  advanceBookingHoursMin Int
  advanceBookingDaysMax  Int
  sameDayCutoffTime      String?

  bufferBetweenAppointmentsMinutes Int  @default(0)
  maxAppointmentsPerDayPerStaff    Int?
  bookingSlotIntervalMinutes       Int  @default(15)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  location Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model LocationService {
  locationId String
  serviceId  String
  isActive   Boolean @default(true)

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([locationId, serviceId])
  @@map("LocationServices")
}

model StaffService {
  staffProfileId String
  serviceId      String

  staffProfile StaffProfile @relation(fields: [staffProfileId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([staffProfileId, serviceId])
  @@map("StaffServices")
}

model StaffLocationAssignment {
  staffProfileId String
  locationId     String

  staffProfile StaffProfile @relation(fields: [staffProfileId], references: [id], onDelete: Cascade)
  location     Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([staffProfileId, locationId])
  @@map("StaffLocationAssignments")
}

// --------------- END BOOKING MODULE MODELS ---------------

model Currency {
  id     String @id @default(cuid())
  code   String @unique // e.g., "USD", "EUR", "PEN"
  name   String // e.g., "United States Dollar", "Euro", "Peruvian Sol"
  symbol String // e.g., "$", "€", "S/"

  // Relations defined in plan - will be fully effective when Shop and Price models are added
  shopsAcceptedIn ShopAcceptedCurrencies[] @relation("ShopAcceptedCurrencies")
  shopsDefaultIn  Shop[]                   @relation("ShopDefaultCurrency")
  prices          Price[]
  orders          Order[]
  payments        Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model Order {
  id            String      @id @default(cuid())
  customerId    String?
  customer      User?       @relation("CustomerOrders", fields: [customerId], references: [id])
  customerName  String
  customerEmail String
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  currencyId    String
  currency      Currency    @relation(fields: [currencyId], references: [id])
  shopId        String
  shop          Shop        @relation(fields: [shopId], references: [id])
  
  items         OrderItem[]
  payments      Payment[]
  shipments     Shipment[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([customerId])
  @@index([shopId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product @relation(fields: [productId], references: [id])
  quantity   Int
  unitPrice  Float
  totalPrice Float
  reviews    Review[]  // Reviews for this order item

  @@index([orderId])
  @@index([productId])
}

model PaymentProvider {
  id          String  @id @default(cuid())
  name        String  // e.g., "Stripe", "PayPal", "Square"
  type        String  // e.g., "CREDIT_CARD", "DIGITAL_WALLET", "BANK_TRANSFER"
  isActive    Boolean @default(true)
  apiKey      String?
  secretKey   String?
  webhookUrl  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  paymentMethods PaymentMethod[]
  payments       Payment[]
  
  @@unique([name])
}

model PaymentMethod {
  id                String  @id @default(cuid())
  name              String  // e.g., "Visa", "MasterCard", "PayPal"
  type              String  // e.g., "CREDIT_CARD", "DEBIT_CARD", "DIGITAL_WALLET"
  providerId        String
  isActive          Boolean @default(true)
  processingFeeRate Float?  // Percentage fee
  fixedFee          Float?  // Fixed fee amount
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  provider PaymentProvider @relation(fields: [providerId], references: [id])
  payments Payment[]
  
  @@index([providerId])
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String?
  amount          Float
  currencyId      String
  status          PaymentStatus @default(PENDING)
  paymentMethodId String
  providerId      String
  transactionId   String?       // External transaction ID from payment provider
  gatewayResponse String?       // JSON response from payment gateway
  failureReason   String?
  refundAmount    Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  order         Order?          @relation(fields: [orderId], references: [id])
  currency      Currency        @relation(fields: [currencyId], references: [id])
  paymentMethod PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  provider      PaymentProvider @relation(fields: [providerId], references: [id])
  
  @@index([orderId])
  @@index([currencyId])
  @@index([paymentMethodId])
  @@index([providerId])
  @@index([status])
}

// --------------- SHIPPING MODULE MODELS ---------------

model ShippingProvider {
  id          String  @id @default(cuid())
  name        String  // e.g., "FedEx", "UPS", "DHL", "USPS"
  type        String  // e.g., "COURIER", "POSTAL", "FREIGHT"
  isActive    Boolean @default(true)
  apiKey      String?
  secretKey   String?
  webhookUrl  String?
  trackingUrl String? // Base URL for tracking packages
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  shippingMethods ShippingMethod[]
  
  @@unique([name])
}

model ShippingMethod {
  id                String  @id @default(cuid())
  name              String  // e.g., "Standard Shipping", "Express", "Overnight"
  description       String?
  providerId        String
  isActive          Boolean @default(true)
  estimatedDaysMin  Int?    // Minimum delivery days
  estimatedDaysMax  Int?    // Maximum delivery days
  trackingEnabled   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  provider      ShippingProvider @relation(fields: [providerId], references: [id])
  shippingRates ShippingRate[]
  shipments     Shipment[]
  
  @@index([providerId])
}

model ShippingZone {
  id          String  @id @default(cuid())
  name        String  // e.g., "Domestic", "International", "Europe"
  description String?
  countries   String[] // Array of country codes
  states      String[] // Array of state/province codes
  postalCodes String[] // Array of postal code patterns
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  shippingRates ShippingRate[]
}

model ShippingRate {
  id               String  @id @default(cuid())
  shippingMethodId String
  shippingZoneId   String
  minWeight        Float?  // Minimum weight in kg
  maxWeight        Float?  // Maximum weight in kg
  minValue         Float?  // Minimum order value
  maxValue         Float?  // Maximum order value
  baseRate         Float   // Base shipping cost
  perKgRate        Float?  // Additional cost per kg
  freeShippingMin  Float?  // Minimum order value for free shipping
  isActive         Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  shippingMethod ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  shippingZone   ShippingZone   @relation(fields: [shippingZoneId], references: [id])
  
  @@index([shippingMethodId])
  @@index([shippingZoneId])
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
  CANCELLED
}

model Shipment {
  id               String         @id @default(cuid())
  orderId          String
  shippingMethodId String
  trackingNumber   String?
  status           ShipmentStatus @default(PENDING)
  shippingCost     Float
  weight           Float?
  dimensions       String?        // JSON string with width, height, length
  
  // Shipping addresses
  fromAddress      String         // JSON string with sender address
  toAddress        String         // JSON string with recipient address
  
  // Tracking information
  shippedAt        DateTime?
  estimatedDelivery DateTime?
  deliveredAt      DateTime?
  
  // Provider response data
  providerResponse String?        // JSON response from shipping provider
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  order          Order          @relation(fields: [orderId], references: [id])
  shippingMethod ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  
  @@index([orderId])
  @@index([shippingMethodId])
  @@index([trackingNumber])
  @@index([status])
}

// --------------- END SHIPPING MODULE MODELS ---------------

// --------------- REVIEW MODULE MODELS ---------------

model Review {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customerId  String?
  customer    User?    @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerName String
  customerEmail String
  rating      Int      // 1-5 stars
  title       String?
  comment     String?
  isVerified  Boolean  @default(false) // Verified purchase
  isApproved  Boolean  @default(false) // Admin approval
  isHelpful   Int      @default(0) // Helpful votes count
  isReported  Boolean  @default(false)
  reportReason String?
  
  // Review metadata
  orderItemId String? // Link to order item for verification
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: SetNull)
  
  // Review images
  images      ReviewImage[]
  
  // Admin response
  response    ReviewResponse?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([productId])
  @@index([customerId])
  @@index([rating])
  @@index([isApproved])
  @@index([createdAt])
}

model ReviewImage {
  id        String @id @default(cuid())
  reviewId  String
  review    Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  imageUrl  String
  altText   String?
  order     Int    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([reviewId])
}

model ReviewResponse {
  id        String @id @default(cuid())
  reviewId  String @unique
  review    Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  responderId String
  responder User   @relation(fields: [responderId], references: [id], onDelete: Cascade)
  response  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------- END REVIEW MODULE MODELS ---------------
