generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique // e.g., "myhotel" for myhotel.dishub.com
  domain    String?   @unique // Custom domain e.g., www.myhotel.com
  status    TenantStatus @default(ACTIVE) // PENDING, ACTIVE, SUSPENDED
  planId    String?   // Relates to a Plan model
  // plan      Plan?     @relation(fields: [planId], references: [id])
  settings  Json?     // Tenant-specific settings
  features  String[]  // List of enabled feature keys/module keys

  // Deployment Information
  vercelProjectId         String? // Vercel Project ID for this tenant's site
  defaultDeploymentUrl    String? // Default Vercel deployment URL (e.g., mytenant.vercel.app)
  customDomainStatus      String? // Status of custom domain configuration on Vercel (e.g., Valid, Pending, Error)
  revalidationSecretToken String? // Secret token for on-demand ISR revalidation

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Many-to-many relationship with Users
  userTenants       UserTenant[]

  // Relations to tenant-specific data
  pages             Page[]
  posts             Post[]
  bookings          Booking[]
  media             Media[]
  cmsSections       CMSSection[]
  menus             Menu[]
  forms             Form[]
  shops             Shop[]
  products          Product[]
  productCategories ProductCategory[]
  orders            Order[]
  clients           Client[]
  projects          Project[]
  appointments      Appointment[]
  tasks             Task[]
  timeEntries       TimeEntry[]
  notifications     Notification[]
  performances      Performance[]
  userSettings      UserSettings[]
  employees         Employee[]
  departments       Department[]
  positions         Position[]
  leaves            Leave[]
  benefits          Benefit[]
  performanceReviews PerformanceReview[]
  employeeDocuments EmployeeDocument[]
  trainings         Training[]
  holidayCalendars  HolidayCalendar[]
  payrolls          Payroll[]
  collections       Collection[]
  cmsDocuments      CMSDocument[]
  cmsTemplates      CMSTemplate[]
  cmsComponents     CMSComponent[]
  navigationMenus   NavigationMenu[]
  headerStyles      HeaderStyle[]
  footerStyles      FooterStyle[]
  blogs             Blog[]
  locations         Location[]
  serviceCategories ServiceCategory[]
  services          Service[]
  staffProfiles     StaffProfile[]
  staffSchedules    StaffSchedule[]
  bookingRules      BookingRule[]
  reviews           Review[]
  discounts         Discount[]
  customerAddresses CustomerAddress[]
  documentation     Documentation[]
  documents         Document[]

  consentRecords        ConsentRecord[]
  auditLogs             AuditLog[]
  dataRequests          DataSubjectRequest[]
  retentionPolicies     DataRetentionPolicy[]
  processingActivities  DataProcessingActivity[]
  privacyPolicies       PrivacyPolicy[]
  dataBreaches          DataBreach[]
}

enum TenantStatus {
  PENDING
  ACTIVE
  SUSPENDED
  ARCHIVED
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  password         String
  firstName        String
  lastName         String
  bio              String?
  department       String?
  phoneNumber      String?
  position         String?
  profileImageUrl  String?
  isActive         Boolean   @default(true)
  emailVerified    DateTime?
  emailVerifiedAt  DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  roleId           String?
  role             RoleModel?           @relation(fields: [roleId], references: [id])
  accounts         Account[]
  sessions         Session[]
  documents        Document[]
  projects         Project[]
  appointments     Appointment[]
  tasksAssigned    Task[]               @relation("TaskAssignee")
  tasksCreated     Task[]               @relation("TaskCreator")
  timeEntries      TimeEntry[]
  notifications    Notification[]
  performances     Performance[]
  settings         UserSettings?
  employee         Employee?
  shops            Shop[]
  bookings         Booking[]
  staffProfile     StaffProfile?
  orders           Order[]              @relation("CustomerOrders")
  clients          Client[]
  posts            Post[]
  reviews          Review[]             // Customer reviews
  reviewResponses  ReviewResponse[]     // Admin responses to reviews
  addresses        CustomerAddress[]    // Customer addresses

  // Many-to-many relationship with Tenants
  userTenants      UserTenant[]

  consentRecords    ConsentRecord[]
  auditLogs         AuditLog[]
  dataRequests      DataSubjectRequest[]

  @@index([email])
  @@index([roleId])
}

// Junction table for User-Tenant many-to-many relationship
model UserTenant {
  id       String @id @default(cuid())
  userId   String
  tenantId String
  role     UserTenantRole @default(TenantUser) // Role within the tenant
  isActive Boolean @default(true)
  joinedAt DateTime @default(now())
  leftAt   DateTime?
  
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([userId])
  @@index([tenantId])
  @@index([role])
}

enum UserTenantRole {
  TenantAdmin    // Tenant administrator (highest level)
  TenantManager  // Tenant manager
  TenantUser     // Regular tenant user
  Employee       // Employee with limited access
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Document {
  id          String         @id @default(cuid())
  title       String
  description String?
  fileUrl     String?
  status      DocumentStatus @default(DRAFT)
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)


  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Client {
  id           String        @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  userId       String // Assuming this refers to the user who created/manages this client
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects     Project[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  clientId    String?
  userId      String  // Assuming this refers to the user who created/manages this project
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  client      Client?       @relation(fields: [clientId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  timeEntries TimeEntry[]
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Appointment {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  isVirtual   Boolean  @default(false)
  meetingUrl  String?
  userId      String // User who booked or is responsible
  clientId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      Client?  @relation(fields: [clientId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}


model TimeEntry {
  id          String   @id @default(cuid())
  date        String
  hours       Float
  description String
  userId      String
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project? @relation(fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}


model ContactFormSubmission {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  createdAt DateTime @default(now())
  // This model seems global (e.g. for platform contact) or needs tenantId if forms are tenant-specific
  // Assuming global for now as it's not in the explicit list for tenantId
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Sessions are user-specific, and users can be tenant-specific or platform admins.
  // No direct tenantId here; derived through User if needed.
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(NOT_STARTED)
  dueDate     DateTime?
  priority    Int        @default(1)
  assigneeId  String
  creatorId   String
  projectId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assignee    User       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id])
  project     Project?   @relation(fields: [projectId], references: [id])

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}


model Notification {
  id              String           @id @default(cuid())
  type            NotificationType
  title           String
  message         String
  isRead          Boolean          @default(false)
  userId          String // The user receiving the notification
  relatedItemId   String?
  relatedItemType String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
}

model Performance {
  id             String   @id @default(cuid())
  userId         String
  period         String
  completedTasks Int
  totalHours     Float
  efficiency     Float?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])


  @@index([tenantId])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  theme              String   @default("light")
  language           String   @default("en")
  timeFormat         String   @default("12h")
  dateFormat         String   @default("MM/DD/YYYY")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
}

model HelpArticle {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Global
}

model Shop {
  id                String  @id @default(cuid())
  name              String
  defaultCurrencyId String
  adminUserId       String? // User who manages this shop

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  defaultCurrency    Currency                 @relation("ShopDefaultCurrency", fields: [defaultCurrencyId], references: [id])
  acceptedCurrencies ShopAcceptedCurrencies[]
  adminUser         User?             @relation(fields: [adminUserId], references: [id])
  locations         Location[]
  products          Product[]
  productCategories ProductCategory[]
  taxes             Tax[]
  orders            Order[]
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([defaultCurrencyId])
  @@index([tenantId])
  @@unique([tenantId, name])
}

model ShopAcceptedCurrencies {
  shopId     String
  currencyId String

  shop     Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  currency Currency @relation("ShopAcceptedCurrencies", fields: [currencyId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([shopId, currencyId])
  @@index([currencyId])
}

model Tax {
  id          String  @id @default(cuid())
  name        String
  rate        Float
  isInclusive Boolean @default(false)
  country     String?
  region      String?
  isGlobal    Boolean @default(false)
  shopId      String? // Tax can be shop-specific or global

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop       Shop?      @relation(fields: [shopId], references: [id]) // If shopId is null, it's a global tax
  priceTaxes PriceTax[]

  // If shopId is present, it implies a tenant context via Shop.
  // If shopId is null, it's global. No direct tenantId needed here.
  @@index([shopId])
  @@index([isGlobal])
  @@index([country])
}

model Product {
  id            String  @id @default(cuid())
  name          String
  description   String?
  sku           String? // SKU might need to be unique per tenant, or globally unique. Assuming per tenant for now.
  stockQuantity Int?
  shopId        String // The shop this product belongs to
  categoryId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop       Shop             @relation(fields: [shopId], references: [id])
  category   ProductCategory? @relation(fields: [categoryId], references: [id])
  prices     Price[]
  orderItems OrderItem[]
  reviews    Review[]
  discounts  DiscountProduct[]
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([shopId])
  @@index([categoryId])
  @@index([tenantId])
  @@unique([tenantId, sku]) // Assuming SKU should be unique per tenant
}

model ProductCategory {
  id          String  @id @default(cuid())
  name        String
  description String?
  slug        String  // Slug for URL friendliness
  parentId    String?
  isActive    Boolean @default(true)
  shopId      String? // Category can be shop-specific

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  shop            Shop?             @relation(fields: [shopId], references: [id])
  parent          ProductCategory?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children        ProductCategory[] @relation("CategoryToParent")
  products        Product[]
  discounts       DiscountCategory[]
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([shopId])
  @@index([parentId])
  @@index([tenantId])
  @@unique([tenantId, slug])
}

model Price {
  id               String  @id @default(cuid())
  amount           Float
  currencyId       String
  productId        String?
  serviceId        String?
  priceIncludesTax Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  currency   Currency   @relation(fields: [currencyId], references: [id])
  product    Product?   @relation(fields: [productId], references: [id], onDelete: Cascade)
  service    Service?   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  priceTaxes PriceTax[]

  // Tenant context is derived from Product or Service. No direct tenantId.
  @@index([currencyId])
  @@index([productId])
  @@index([serviceId])
}

model PriceTax {
  priceId   String
  taxId     String
  appliedAt DateTime @default(now())

  price Price @relation(fields: [priceId], references: [id], onDelete: Cascade)
  tax   Tax   @relation(fields: [taxId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([priceId, taxId])
  @@index([taxId])
}

model RoleModel {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  permissions Permission[] @relation("PermissionToRoleModel")

  @@map("RoleTable")
  // Global
}

model Permission {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  roles       RoleModel[] @relation("PermissionToRoleModel")
  // Global
}

model ExternalLink {
  id           String            @id @default(cuid())
  name         String
  url          String
  icon         String
  description  String?
  isActive     Boolean           @default(true)
  order        Int               @default(0)
  createdBy    String
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  accessType   AccessControlType @default(PUBLIC)
  allowedRoles String[]          @default([])
  allowedUsers String[]          @default([])
  deniedUsers  String[]          @default([])
  // Global or tenant-specific? Assuming global for now as per instructions.
}

model Employee {
  id               String              @id @default(cuid())
  employeeId       String              // Employee ID might need to be unique per tenant
  userId           String              @unique // Links to User model, must be unique
  dateOfBirth      DateTime?
  gender           String?
  maritalStatus    String?
  nationality      String?
  address          String?
  emergencyContact String?
  hireDate         DateTime
  terminationDate  DateTime?
  status           EmployeeStatus      @default(ACTIVE)
  departmentId     String
  positionId       String
  managerId        String?
  salary           Float
  bankInfo         String?
  taxInfo          String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  attendances      Attendance[]
  department       Department          @relation(fields: [departmentId], references: [id])
  manager          Employee?           @relation("EmployeeToManager", fields: [managerId], references: [id])
  subordinates     Employee[]          @relation("EmployeeToManager")
  position         Position            @relation(fields: [positionId], references: [id])
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  benefits         EmployeeBenefit[]
  documents        EmployeeDocument[]
  trainings        EmployeeTraining[]
  leaves           Leave[]
  payrolls         Payroll[]
  performances     PerformanceReview[]
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
  @@unique([tenantId, employeeId])
}

model Department {
  id          String     @id @default(cuid())
  name        String
  description String?
  managerId   String? // Manager of the department (Employee ID)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
  @@unique([tenantId, name]) // Department names usually unique per tenant
}

model Position {
  id               String     @id @default(cuid())
  title            String
  description      String?
  salaryRangeMin   Float?
  salaryRangeMax   Float?
  isRemoteEligible Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  employees        Employee[]

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
  @@unique([tenantId, title]) // Position titles usually unique per tenant
}

model Attendance {
  id         String    @id @default(cuid())
  employeeId String
  date       DateTime
  timeIn     DateTime
  timeOut    DateTime?
  status     String
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  employee   Employee  @relation(fields: [employeeId], references: [id])
  // Tenant context from Employee
}

model Leave {
  id           String        @id @default(cuid())
  employeeId   String
  leaveType    LeaveType
  startDate    DateTime
  endDate      DateTime
  totalDays    Float
  reason       String?
  status       RequestStatus @default(PENDING)
  attachments  String?
  approvedById String? // User ID of approver
  approvedAt   DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  employee     Employee      @relation(fields: [employeeId], references: [id])
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
}

model Benefit {
  id                String            @id @default(cuid())
  name              String
  description       String?
  type              BenefitType
  eligibilityMonths Int               @default(0)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  employeeBenefits  EmployeeBenefit[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@unique([tenantId, name]) // Benefit names usually unique per tenant
}

model EmployeeBenefit {
  id         String        @id @default(cuid())
  employeeId String
  benefitId  String
  startDate  DateTime
  endDate    DateTime?
  status     RequestStatus @default(ACTIVE)
  notes      String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  benefit    Benefit       @relation(fields: [benefitId], references: [id])
  employee   Employee      @relation(fields: [employeeId], references: [id])
  // Tenant context from Employee and Benefit
}

model PerformanceReview {
  id                 String       @id @default(cuid())
  employeeId         String
  reviewerId         String // User ID of reviewer
  reviewDate         DateTime
  reviewPeriodStart  DateTime
  reviewPeriodEnd    DateTime
  performanceScore   Float
  qualityScore       Float
  attendanceScore    Float
  communicationScore Float
  leadershipScore    Float?
  strengths          String?
  areasToImprove     String?
  goals              String?
  comments           String?
  employeeComments   String?
  status             ReviewStatus @default(DRAFT)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  employee           Employee     @relation(fields: [employeeId], references: [id])
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String
  
  @@index([tenantId])
}

model EmployeeDocument {
  id           String       @id @default(cuid())
  employeeId   String
  title        String
  description  String?
  documentUrl  String
  documentType DocumentType
  expiryDate   DateTime?
  isVerified   Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  employee     Employee     @relation(fields: [employeeId], references: [id])
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
}

model Training {
  id           String             @id @default(cuid())
  title        String
  description  String?
  type         TrainingType
  duration     Int
  durationUnit String
  provider     String?
  cost         Float?
  isRequired   Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  employees    EmployeeTraining[]
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
  @@unique([tenantId, title]) // Training titles usually unique per tenant
}

model EmployeeTraining {
  id             String         @id @default(cuid())
  employeeId     String
  trainingId     String
  startDate      DateTime
  completionDate DateTime?
  status         TrainingStatus @default(ASSIGNED)
  score          Float?
  certificate    String?
  feedback       String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  employee       Employee       @relation(fields: [employeeId], references: [id])
  training       Training       @relation(fields: [trainingId], references: [id])
  // Tenant context from Employee and Training
}

model HolidayCalendar {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  description String?
  isRecurring Boolean  @default(false)
  country     String?
  region      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
  @@unique([tenantId, name, date]) // Calendar event name + date unique per tenant
}

model Payroll {
  id            String        @id @default(cuid())
  employeeId    String
  periodStart   DateTime
  periodEnd     DateTime
  basicSalary   Float
  overtime      Float?
  bonus         Float?
  allowances    Float?
  deductions    Float?
  taxes         Float?
  netSalary     Float
  paymentDate   DateTime?
  paymentMethod String?
  status        PayrollStatus @default(PENDING)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  employee      Employee      @relation(fields: [employeeId], references: [id])
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
}

model Page {
  id              String       @id @default(cuid())
  title           String
  slug            String       // Slug per tenant
  description     String?
  isPublished     Boolean      @default(false)
  publishDate     DateTime?
  featuredImage   String?
  metaTitle       String?
  metaDescription String?
  createdById     String // User ID
  updatedById     String? // User ID
  parentId        String?
  order           Int          @default(0)
  pageType        PageType     @default(CONTENT)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  locale          String       @default("en")
  template        String       @default("default")
  isDefault       Boolean      @default(false)
  forms           Form[]
  menuItems       MenuItem[]
  parent          Page?        @relation("PageToPage", fields: [parentId], references: [id])
  children        Page[]       @relation("PageToPage")
  seo             PageSEO?
  sections        CMSSection[] @relation("PageToSection")
  directSections  CMSSection[] @relation("SectionToPage")
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  @@unique([tenantId, slug])
}

model CMSSection {
  id              String             @id @default(cuid())
  sectionId       String             // sectionId should be unique per tenant if used as an identifier
  pageId          String?
  lastUpdated     DateTime           @default(now())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  createdBy       String? // User ID
  description     String?
  name            String?
  backgroundImage String?
  backgroundType  String?            @default("gradient")
  gridDesign      String?            @default("basic")
  components      SectionComponent[]
  page            Page?              @relation("SectionToPage", fields: [pageId], references: [id])
  pages           Page[]             @relation("PageToSection") // This relation seems to imply a M2M via an implicit table.
                                                              // If a section can belong to multiple pages directly.
  media           Media[]
  order           Int                @default(0)
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  @@unique([tenantId, sectionId])
  @@map("CMSSection")
}

model Media {
  id              String      @id @default(cuid())
  title           String?
  description     String?
  fileUrl         String
  fileName        String
  fileSize        Int?
  fileType        String?
  altText         String?
  cmsSectionId    String?
  uploadedById    String // User ID
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  cmsSection      CMSSection? @relation(fields: [cmsSectionId], references: [id])
  posts           Post[]      @relation("PostMedia")
  featuredInPosts Post[]      @relation("PostFeaturedImage")
  tenant          Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  tenantId        String
  @@index([tenantId])
}

model PageSEO {
  id                 String   @id @default(cuid())
  pageId             String   @unique
  title              String?
  description        String?
  keywords           String?
  ogTitle            String?
  ogDescription      String?
  ogImage            String?
  twitterTitle       String?
  twitterDescription String?
  twitterImage       String?
  canonicalUrl       String?
  structuredData     Json?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  page               Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  // Tenant context from Page
}

model Menu {
  id          String       @id @default(cuid())
  name        String       // Name per tenant
  location    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  headerStyle HeaderStyle?
  footerStyle FooterStyle?
  items       MenuItem[]
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@unique([tenantId, name])
}

model MenuItem {
  id        String     @id @default(cuid())
  menuId    String
  parentId  String?
  title     String
  url       String?
  pageId    String? // Refers to Page.id
  target    String?    @default("_self")
  icon      String?
  order     Int        @default(0)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  menu      Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  page      Page?      @relation(fields: [pageId], references: [id])
  parent    MenuItem?  @relation("MenuItemToMenuItem", fields: [parentId], references: [id])
  children  MenuItem[] @relation("MenuItemToMenuItem")
  // Tenant context from Menu (and Page)
}

model SiteSettings {
  id                String   @id @default(cuid())
  siteName          String
  siteDescription   String?
  logoUrl           String?
  faviconUrl        String?
  primaryColor      String?
  secondaryColor    String?
  googleAnalyticsId String?
  facebookPixelId   String?
  customCss         String?
  customJs          String?
  contactEmail      String?
  contactPhone      String?
  address           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  accentColor       String?
  defaultLocale     String   @default("en")
  footerText        String?
  maintenanceMode   Boolean  @default(false)
  metaDescription   String?
  metaTitle         String?
  ogImage           String?
  socialLinks       Json?
  supportedLocales  String[] @default(["en"])
  twitterCardType   String?  @default("summary_large_image")
  twitterHandle     String?
  // Global
}

model UserPermission {
  id             String   @id @default(cuid())
  userId         String
  permissionName String
  granted        Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, permissionName])
  @@index([userId])
  @@index([permissionName])
  // Relates to User, tenant context can be derived if needed.
}

model Collection {
  id          String            @id @default(cuid())
  name        String
  slug        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  documents   CMSDocument[]
  fields      CollectionField[]
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@unique([tenantId, slug])
  // name also likely unique per tenant, but slug is primary for URLs
  // @@unique([tenantId, name])
}

model CollectionField {
  id           String     @id @default(cuid())
  collectionId String
  name         String
  label        String
  type         FieldType
  required     Boolean    @default(false)
  localized    Boolean    @default(false)
  isUnique     Boolean    @default(false) // isUnique within the collection for this tenant
  defaultValue Json?
  options      Json?
  order        Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([collectionId, name]) // Field name unique within a collection
  // Tenant context from Collection
}

model CMSDocument {
  id           String     @id @default(cuid())
  collectionId String
  data         Json
  locale       String     @default("en")
  isPublished  Boolean    @default(false)
  publishedAt  DateTime?
  createdById  String // User ID
  updatedById  String? // User ID
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  collection   Collection @relation(fields: [collectionId], references: [id])

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
}

model CMSTemplate {
  id          String         @id @default(cuid())
  name        String
  slug        String
  description String?
  structure   Json?
  thumbnail   String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  components  CMSComponent[] // Components that can be part of this template

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  @@unique([tenantId, slug])
  // @@unique([tenantId, name])
}

model CMSComponent {
  id               String             @id @default(cuid())
  name             String
  slug             String
  description      String?
  icon             String?
  category         String?
  schema           Json
  preview          String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  templateId       String?            // If component is specific to a template
  template         CMSTemplate?       @relation(fields: [templateId], references: [id])
  sectionInstances SectionComponent[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  @@unique([tenantId, slug])
  // @@unique([tenantId, name])
}

model SectionComponent {
  id          String       @id @default(cuid())
  sectionId   String // CMSSection.id
  componentId String // CMSComponent.id
  order       Int          @default(0)
  data        Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  component   CMSComponent @relation(fields: [componentId], references: [id])
  section     CMSSection   @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, componentId, order]) // Order of component within a section
  @@map("SectionComponent")
  // Tenant context from CMSSection and CMSComponent
}

model NavigationMenu {
  id          String               @id @default(cuid())
  name        String               // Name per tenant
  description String?
  location    String?
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  items       NavigationMenuItem[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  @@unique([tenantId, name])
}

model NavigationMenuItem {
  id           String               @id @default(cuid())
  menuId       String
  parentId     String?
  label        String
  href         String?
  pageId       String? // Page.id
  documentId   String? // CMSDocument.id
  collectionId String? // Collection.id
  target       String?              @default("_self")
  icon         String?
  order        Int                  @default(0)
  isActive     Boolean              @default(true)
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  menu         NavigationMenu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  parent       NavigationMenuItem?  @relation("NavigationMenuItemToItem", fields: [parentId], references: [id])
  children     NavigationMenuItem[] @relation("NavigationMenuItemToItem")
  // Tenant context from NavigationMenu
}

model HeaderStyle {
  id                 String   @id @default(cuid())
  menuId             String   @unique // Each menu has one header style
  transparency       Int      @default(0)
  headerSize         String   @default("md")
  menuAlignment      String   @default("right")
  menuButtonStyle    String   @default("default")
  mobileMenuStyle    String   @default("dropdown")
  mobileMenuPosition String   @default("right")
  transparentHeader  Boolean  @default(false)
  borderBottom       Boolean  @default(false)
  fixedHeader        Boolean  @default(false)
  advancedOptions    Json?
  showButton         Boolean? @default(false)
  buttonText         String?
  buttonAction       String?
  buttonColor        String?
  buttonTextColor    String?
  buttonSize         String?  @default("md")
  buttonBorderRadius Int?     @default(0)
  buttonShadow       String?  @default("none")
  buttonBorderColor  String?
  buttonBorderWidth  Int?     @default(0)
  buttonWidth        String?
  buttonHeight       String?
  buttonPosition     String?  @default("center")
  buttonDropdown     Boolean? @default(false)
  buttonDropdownItems Json?
  buttonUrlType      String?  @default("custom")
  selectedPageId     String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  menu               Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
}

model FooterStyle {
  id              String   @id @default(cuid())
  transparency    Int?     @default(0)
  columnLayout    String?  @default("grid")
  socialAlignment String?  @default("left")
  borderTop       Boolean? @default(false)
  alignment       String?  @default("left")
  padding         String?  @default("medium")
  width           String?  @default("container")
  advancedOptions Json?

  menuId String @unique // Each menu has one footer style
  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
}

model Form {
  id                String           @id @default(cuid())
  title             String
  description       String?
  slug              String           // Slug per tenant
  isMultiStep       Boolean          @default(false)
  isActive          Boolean          @default(true)
  successMessage    String?
  redirectUrl       String?
  submitButtonText  String           @default("Submit")
  submitButtonStyle String?
  layout            String?
  styling           Json?
  pageId            String? // Page.id
  createdById       String // User ID
  updatedById       String? // User ID
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  page              Page?            @relation(fields: [pageId], references: [id])
  fields            FormField[]
  steps             FormStep[]
  submissions       FormSubmission[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  @@unique([tenantId, slug])
}

model FormStep {
  id              String      @id @default(cuid())
  formId          String
  title           String
  description     String?
  order           Int         @default(0)
  isVisible       Boolean     @default(true)
  validationRules Json?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  fields          FormField[]
  form            Form        @relation(fields: [formId], references: [id], onDelete: Cascade)
  // Tenant context from Form
}

model FormField {
  id              String        @id @default(cuid())
  formId          String? // Belongs to a Form directly
  stepId          String? // Or belongs to a FormStep
  label           String
  name            String // name should be unique within a form/step for data submission
  type            FormFieldType
  placeholder     String?
  defaultValue    String?
  helpText        String?
  isRequired      Boolean       @default(false)
  order           Int           @default(0)
  options         Json?
  validationRules Json?
  styling         Json?
  width           Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  form            Form?         @relation(fields: [formId], references: [id], onDelete: Cascade)
  step            FormStep?     @relation(fields: [stepId], references: [id], onDelete: Cascade)
  // Tenant context from Form
}

model FormSubmission {
  id        String           @id @default(cuid())
  formId    String
  data      Json
  metadata  Json?
  status    SubmissionStatus @default(RECEIVED)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  form      Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  // Tenant context from Form
}

enum FieldType {
  TEXT
  TEXTAREA
  RICHTEXT
  NUMBER
  BOOLEAN
  DATE
  DATETIME
  IMAGE
  FILE
  RELATION
  JSON
  COLOR
  SELECT
  MULTISELECT
  EMAIL
  URL
  PASSWORD
}

enum DocumentStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum NotificationType {
  DOCUMENT
  TASK
  APPOINTMENT
  SYSTEM
}

enum EmployeeStatus {
  ACTIVE
  PROBATION
  LEAVE
  SUSPENDED
  TERMINATED
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  UNPAID
  BEREAVEMENT
  STUDY
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
  CANCELLED
}

enum ReviewStatus {
  DRAFT
  SUBMITTED
  ACKNOWLEDGED
  COMPLETED
}

enum DocumentType {
  IDENTITY
  EDUCATION
  CERTIFICATE
  CONTRACT
  VISA
  OTHER
}

enum TrainingType {
  ONBOARDING
  TECHNICAL
  SOFT_SKILLS
  COMPLIANCE
  LEADERSHIP
  SAFETY
  OTHER
}

enum TrainingStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum BenefitType {
  HEALTH_INSURANCE
  LIFE_INSURANCE
  PENSION
  MEAL_ALLOWANCE
  TRANSPORTATION
  EDUCATION
  WELLNESS
  CHILDCARE
  OTHER
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
  CANCELLED
}

enum PageType {
  HOME
  CONTENT
  BLOG
  LANDING
  CONTACT
  SERVICES
  ABOUT
  CUSTOM
}

enum ComponentType {
  HERO
  TEXT
  IMAGE
  GALLERY
  VIDEO
  FORM
  CARDS
  TESTIMONIALS
  CTA
  FAQ
  FEATURES
  PRICING
  TEAM
  BENEFITS
  CONTACT
  SERVICES
  CUSTOM
  FORM_BUILDER
}

enum AccessControlType {
  PUBLIC
  ROLES
  USERS
  MIXED
}

enum FormFieldType {
  TEXT
  TEXTAREA
  EMAIL
  PASSWORD
  NUMBER
  PHONE
  DATE
  TIME
  DATETIME
  SELECT
  MULTISELECT
  RADIO
  CHECKBOX
  TOGGLE
  SLIDER
  RATING
  FILE
  HIDDEN
  HEADING
  PARAGRAPH
  DIVIDER
  SPACER
  HTML
  CAPTCHA
  SIGNATURE
  AUTOCOMPLETE
  ADDRESS
}

enum SubmissionStatus {
  RECEIVED
  PROCESSING
  COMPLETED
  REJECTED
  SPAM
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  description String?
  slug        String   // Slug per tenant
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  @@unique([tenantId, slug])
}

model Post {
  id            String  @id @default(cuid())
  title         String
  slug          String  // Slug per tenant
  content       String  @db.Text
  excerpt       String?
  featuredImage String?

  featuredImageId    String?
  status             PostStatus @default(DRAFT)
  publishedAt        DateTime?
  blogId             String
  authorId           String // User ID
  metaTitle          String?
  metaDescription    String?
  tags               String[]
  categories         String[]
  readTime           Int?       @default(0)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  blog               Blog       @relation(fields: [blogId], references: [id])
  author             User       @relation(fields: [authorId], references: [id])
  featuredImageMedia Media?     @relation("PostFeaturedImage", fields: [featuredImageId], references: [id])
  media              Media[]    @relation("PostMedia")

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  @@unique([tenantId, slug])
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// --------------- BOOKING MODULE ENUMS ---------------
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
  RESCHEDULED
}

enum CommunicationMethod {
  EMAIL
  SMS
  PHONE
  WHATSAPP
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ScheduleType {
  REGULAR_HOURS
  OVERRIDE_HOURS
  BREAK
  TIME_OFF
  SPECIAL_EVENT
  BLACKOUT_DATE
}

// --------------- END BOOKING MODULE ENUMS ---------------

// --------------- BOOKING MODULE MODELS ---------------
model Location {
  id             String   @id @default(cuid())
  name           String
  address        String?
  phone          String?
  operatingHours Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  shopId String? // A location might be part of a shop
  shop   Shop?   @relation(fields: [shopId], references: [id])

  services         LocationService[]
  staffAssignments StaffLocationAssignment[]
  bookings         Booking[]
  schedules        StaffSchedule[]
  bookingRules     BookingRule[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  @@index([shopId])
  // @@unique([tenantId, name]) // Location name could be unique per tenant
}

model ServiceCategory {
  id           String   @id @default(cuid())
  name         String   // Name per tenant
  description  String?
  displayOrder Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  services        Service[]
  parentId        String?
  parentCategory  ServiceCategory?  @relation("ServiceCategoryToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childCategories ServiceCategory[] @relation("ServiceCategoryToParent")

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  @@unique([tenantId, name])
  @@map("ServiceCategories")
}

model Service {
  id                         String   @id @default(cuid())
  name                       String
  description                String?
  durationMinutes            Int
  bufferTimeBeforeMinutes    Int      @default(0)
  bufferTimeAfterMinutes     Int      @default(0)
  preparationTimeMinutes     Int      @default(0)
  cleanupTimeMinutes         Int      @default(0)
  maxDailyBookingsPerService Int?
  isActive                   Boolean  @default(true)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  serviceCategoryId String
  serviceCategory   ServiceCategory @relation(fields: [serviceCategoryId], references: [id])

  locations LocationService[]
  staff     StaffService[]
  bookings  Booking[]
  prices    Price[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
  // @@unique([tenantId, name]) // Service name could be unique per tenant
}

model StaffProfile {
  id              String   @id @default(cuid())
  userId          String   @unique // Links to User model
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio             String?
  specializations String[] @default([])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  schedules           StaffSchedule[]
  assignedServices    StaffService[]
  locationAssignments StaffLocationAssignment[]
  bookings            Booking[]                 @relation("StaffBookings")

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  @@index([tenantId])
}

model StaffSchedule {
  id             String       @id @default(cuid())
  staffProfileId String
  staffProfile   StaffProfile @relation(fields: [staffProfileId], references: [id], onDelete: Cascade)

  locationId String? // Location for this specific schedule entry
  location   Location? @relation(fields: [locationId], references: [id], onDelete: SetNull)

  date      DateTime?
  dayOfWeek DayOfWeek?

  startTime String
  endTime   String

  scheduleType ScheduleType
  isAvailable  Boolean      @default(true)
  notes        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([staffProfileId, date])
  @@index([staffProfileId, dayOfWeek])
  @@index([tenantId])
}

model Booking {
  id         String @id @default(cuid())
  customerId String // User ID of the customer
  customer   User   @relation(fields: [customerId], references: [id], onDelete: Cascade)

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id])

  staffProfileId String? // Staff who will provide the service
  staffProfile   StaffProfile? @relation("StaffBookings", fields: [staffProfileId], references: [id], onDelete: SetNull)

  locationId String
  location   Location @relation(fields: [locationId], references: [id])

  bookingDate     DateTime
  startTime       DateTime
  endTime         DateTime
  durationMinutes Int

  status BookingStatus @default(PENDING)
  notes  String?

  communicationPreferences CommunicationMethod[] @default([])
  reminderSentAt           DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([customerId])
  @@index([serviceId])
  @@index([staffProfileId])
  @@index([locationId])
  @@index([bookingDate])
  @@index([startTime])
  @@index([tenantId])
}

model BookingRule {
  id         String  @id @default(cuid())
  locationId String? @unique // Rule can be specific to a location
  // serviceId  String?

  advanceBookingHoursMin Int
  advanceBookingDaysMax  Int
  sameDayCutoffTime      String?

  bufferBetweenAppointmentsMinutes Int  @default(0)
  maxAppointmentsPerDayPerStaff    Int?
  bookingSlotIntervalMinutes       Int  @default(15)

  location Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
}

model LocationService {
  locationId String
  serviceId  String
  isActive   Boolean @default(true)

  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  service  Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([locationId, serviceId])
  @@map("LocationServices")
  // Tenant context from Location and Service
}

model StaffService {
  staffProfileId String
  serviceId      String

  staffProfile StaffProfile @relation(fields: [staffProfileId], references: [id], onDelete: Cascade)
  service      Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@id([staffProfileId, serviceId])
  @@map("StaffServices")
  // Tenant context from StaffProfile and Service
}

model StaffLocationAssignment {
  staffProfileId String
  locationId     String

  staffProfile StaffProfile @relation(fields: [staffProfileId], references: [id], onDelete: Cascade)
  location     Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now())

  @@id([staffProfileId, locationId])
  @@map("StaffLocationAssignments")
  // Tenant context from StaffProfile and Location
}

// --------------- END BOOKING MODULE MODELS ---------------

model Currency {
  id     String @id @default(cuid())
  code   String @unique
  name   String
  symbol String

  shopsAcceptedIn ShopAcceptedCurrencies[] @relation("ShopAcceptedCurrencies")
  shopsDefaultIn  Shop[]                   @relation("ShopDefaultCurrency")
  prices          Price[]
  orders          Order[]
  payments        Payment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Global
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model Order {
  id            String      @id @default(cuid())
  customerId    String? // User ID
  customer      User?       @relation("CustomerOrders", fields: [customerId], references: [id])
  customerName  String
  customerEmail String
  status        OrderStatus @default(PENDING)
  totalAmount   Float
  currencyId    String
  currency      Currency    @relation(fields: [currencyId], references: [id])
  shopId        String // Shop this order belongs to
  shop          Shop        @relation(fields: [shopId], references: [id])
  discountId    String?
  discount      Discount?   @relation(fields: [discountId], references: [id])
  discountAmount Float?     @default(0)
  
  items         OrderItem[]
  payments      Payment[]
  shipments     Shipment[]
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])

  @@index([customerId])
  @@index([shopId])
  @@index([status])
  @@index([createdAt])
  @@index([tenantId])
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String
  product    Product @relation(fields: [productId], references: [id]) // Product might not exist if deleted, handle this
  quantity   Int
  unitPrice  Float
  totalPrice Float
  reviews    Review[]

  // Tenant context from Order
  @@index([orderId])
  @@index([productId])
}

model PaymentProvider {
  id          String  @id @default(cuid())
  name        String
  type        String
  isActive    Boolean @default(true)
  apiKey      String?
  secretKey   String?
  webhookUrl  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  paymentMethods PaymentMethod[]
  payments       Payment[]
  
  @@unique([name])
  // Global
}

model PaymentMethod {
  id                String  @id @default(cuid())
  name              String
  type              String
  providerId        String
  isActive          Boolean @default(true)
  processingFeeRate Float?
  fixedFee          Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  provider PaymentProvider @relation(fields: [providerId], references: [id])
  payments Payment[]
  
  @@index([providerId])
  // Global
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String? // Order this payment is for
  amount          Float
  currencyId      String
  status          PaymentStatus @default(PENDING)
  paymentMethodId String
  providerId      String
  transactionId   String?
  gatewayResponse String?
  failureReason   String?
  refundAmount    Float?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  order         Order?          @relation(fields: [orderId], references: [id])
  currency      Currency        @relation(fields: [currencyId], references: [id])
  paymentMethod PaymentMethod   @relation(fields: [paymentMethodId], references: [id])
  provider      PaymentProvider @relation(fields: [providerId], references: [id])
  
  // Tenant context from Order
  @@index([orderId])
  @@index([currencyId])
  @@index([paymentMethodId])
  @@index([providerId])
  @@index([status])
}

// --------------- SHIPPING MODULE MODELS ---------------

model ShippingProvider {
  id          String  @id @default(cuid())
  name        String
  type        String
  isActive    Boolean @default(true)
  apiKey      String?
  secretKey   String?
  webhookUrl  String?
  trackingUrl String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  shippingMethods ShippingMethod[]
  
  @@unique([name])
  // Global
}

model ShippingMethod {
  id                String  @id @default(cuid())
  name              String
  description       String?
  providerId        String
  isActive          Boolean @default(true)
  estimatedDaysMin  Int?
  estimatedDaysMax  Int?
  trackingEnabled   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  provider      ShippingProvider @relation(fields: [providerId], references: [id])
  shippingRates ShippingRate[]
  shipments     Shipment[]
  
  @@index([providerId])
  // Global
}

model ShippingZone {
  id          String  @id @default(cuid())
  name        String
  description String?
  countries   String[]
  states      String[]
  postalCodes String[]
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  shippingRates ShippingRate[]
  // Global
}

model ShippingRate {
  id               String  @id @default(cuid())
  shippingMethodId String
  shippingZoneId   String
  minWeight        Float?
  maxWeight        Float?
  minValue         Float?
  maxValue         Float?
  baseRate         Float
  perKgRate        Float?
  freeShippingMin  Float?
  isActive         Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  shippingMethod ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  shippingZone   ShippingZone   @relation(fields: [shippingZoneId], references: [id])
  
  @@index([shippingMethodId])
  @@index([shippingZoneId])
  // Global
}

enum ShipmentStatus {
  PENDING
  PROCESSING
  SHIPPED
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED
  RETURNED
  CANCELLED
}

model Shipment {
  id               String         @id @default(cuid())
  orderId          String
  shippingMethodId String
  trackingNumber   String?
  status           ShipmentStatus @default(PENDING)
  shippingCost     Float
  weight           Float?
  dimensions       String?
  
  fromAddress      String
  toAddress        String
  
  shippedAt        DateTime?
  estimatedDelivery DateTime?
  deliveredAt      DateTime?
  
  providerResponse String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  order          Order          @relation(fields: [orderId], references: [id])
  shippingMethod ShippingMethod @relation(fields: [shippingMethodId], references: [id])
  
  // Tenant context from Order
  @@index([orderId])
  @@index([shippingMethodId])
  @@index([trackingNumber])
  @@index([status])
}

// --------------- END SHIPPING MODULE MODELS ---------------

// --------------- REVIEW MODULE MODELS ---------------

model Review {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customerId  String? // User ID
  customer    User?    @relation(fields: [customerId], references: [id], onDelete: SetNull)
  customerName String
  customerEmail String
  rating      Int
  title       String?
  comment     String?
  isVerified  Boolean  @default(false)
  isApproved  Boolean  @default(false)
  isHelpful   Int      @default(0)
  isReported  Boolean  @default(false)
  reportReason String?
  
  orderItemId String?
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id], onDelete: SetNull)
  
  images      ReviewImage[]
  
  response    ReviewResponse?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  
  @@index([productId])
  @@index([customerId])
  @@index([rating])
  @@index([isApproved])
  @@index([createdAt])
  @@index([tenantId])
}

model ReviewImage {
  id        String @id @default(cuid())
  reviewId  String
  review    Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  imageUrl  String
  altText   String?
  order     Int    @default(0)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([reviewId])
  // Tenant context from Review
}

model ReviewResponse {
  id        String @id @default(cuid())
  reviewId  String @unique
  review    Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  responderId String // User ID of responder
  responder User   @relation(fields: [responderId], references: [id], onDelete: Cascade)
  response  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Tenant context from Review
}

// --------------- END REVIEW MODULE MODELS ---------------

// --------------- DISCOUNT MODULE MODELS ---------------

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_X_GET_Y
}

model Discount {
  id                    String       @id @default(cuid())
  code                  String       // Code per tenant
  name                  String
  description           String?
  type                  DiscountType
  value                 Float
  minimumOrderAmount    Float?
  maximumDiscountAmount Float?
  usageLimit            Int?
  usageCount            Int          @default(0)
  customerUsageLimit    Int?
  isActive              Boolean      @default(true)
  startsAt              DateTime?
  expiresAt             DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  applicableProducts   DiscountProduct[]   
  applicableCategories DiscountCategory[]  
  orders               Order[]

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  
  @@index([isActive])
  @@index([startsAt])
  @@index([expiresAt])
  @@index([tenantId])
  @@unique([tenantId, code])
}

model DiscountProduct {
  id         String  @id @default(cuid())
  discountId String
  productId  String
  isExcluded Boolean @default(false)
  
  discount Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([discountId, productId, isExcluded])
  @@index([discountId])
  @@index([productId])
  // Tenant context from Discount and Product
}

model DiscountCategory {
  id         String  @id @default(cuid())
  discountId String
  categoryId String
  isExcluded Boolean @default(false)
  
  discount Discount        @relation(fields: [discountId], references: [id], onDelete: Cascade)
  category ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([discountId, categoryId, isExcluded])
  @@index([discountId])
  @@index([categoryId])
  // Tenant context from Discount and ProductCategory
}

// --------------- END DISCOUNT MODULE MODELS ---------------

// --------------- CUSTOMER ADDRESS MODULE MODELS ---------------

enum AddressType {
  BILLING
  SHIPPING
}

model CustomerAddress {
  id         String      @id @default(cuid())
  customerId String // User ID
  customer   User        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  type       AddressType
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean     @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([customerId])
  @@index([type])
  @@index([tenantId])
}

model Documentation {
  id          String   @id @default(cuid())
  title       String
  slug        String   // Slug per tenant
  description String?
  content     String   @db.Text
  category    String
  tags        String[]
  isPublished Boolean  @default(true)
  order       Int?     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id])
  @@index([tenantId])
  @@unique([tenantId, slug])
  @@map("documentation")
}

// --------------- GDPR/RGPD COMPLIANCE MODELS ---------------

model ConsentRecord {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  purpose     ConsentPurpose
  granted     Boolean
  grantedAt   DateTime?
  revokedAt   DateTime?
  version     String      // Version of privacy policy
  ipAddress   String?
  userAgent   String?
  source      String?     // "registration", "cookie_banner", "settings"
  metadata    Json?       // Additional context
  expiresAt   DateTime?   // For time-limited consents
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  tenantId    String
  tenant      Tenant      @relation(fields: [tenantId], references: [id])
  
  @@index([userId])
  @@index([tenantId])
  @@index([purpose])
  @@index([granted])
  @@unique([userId, purpose, version, tenantId])
}

model AuditLog {
  id          String      @id @default(cuid())
  userId      String?     // Null for system actions
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  action      AuditAction
  resource    String      // "User", "FormSubmission", "ConsentRecord", etc.
  resourceId  String?     // ID of the affected resource
  oldValues   Json?       // Previous state (for updates)
  newValues   Json?       // New state (for creates/updates)
  details     String?     // Human-readable description
  ipAddress   String?
  userAgent   String?
  sessionId   String?
  timestamp   DateTime    @default(now())
  severity    AuditSeverity @default(INFO)
  category    AuditCategory @default(DATA_ACCESS)
  
  tenantId    String?     // Null for platform-level actions
  tenant      Tenant?     @relation(fields: [tenantId], references: [id])
  
  @@index([userId])
  @@index([tenantId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([category])
  @@index([severity])
}

model DataSubjectRequest {
  id              String              @id @default(cuid())
  userId          String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  type            DataSubjectRequestType
  status          RequestStatus       @default(PENDING)
  description     String?             // User's description of the request
  requestedAt     DateTime            @default(now())
  acknowledgedAt  DateTime?           // When admin acknowledged the request
  completedAt     DateTime?           // When request was fulfilled
  rejectedAt      DateTime?           // When request was rejected
  rejectionReason String?             // Reason for rejection
  
  // For data export requests
  exportUrl       String?             // URL to download exported data
  exportExpiresAt DateTime?           // When export link expires
  
  // Processing details
  processedBy     String?             // User ID of admin who processed
  processingNotes String?             // Internal notes
  
  // Verification
  verificationToken String?           // Token for email verification
  verifiedAt      DateTime?           // When user verified their identity
  
  tenantId        String
  tenant          Tenant              @relation(fields: [tenantId], references: [id])
  
  @@index([userId])
  @@index([tenantId])
  @@index([type])
  @@index([status])
  @@index([requestedAt])
}

model DataRetentionPolicy {
  id              String      @id @default(cuid())
  name            String      // "User Data", "Form Submissions", etc.
  description     String?
  dataType        String      // "User", "FormSubmission", "AuditLog", etc.
  retentionDays   Int         // Days to retain data
  autoDelete      Boolean     @default(true)
  isActive        Boolean     @default(true)
  
  // Conditions for applying the policy
  conditions      Json?       // Additional conditions (e.g., user inactive for X days)
  
  // Execution tracking
  lastExecuted    DateTime?
  nextExecution   DateTime?
  
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  tenantId        String?     // Null for global policies
  tenant          Tenant?     @relation(fields: [tenantId], references: [id])
  
  @@index([tenantId])
  @@index([dataType])
  @@index([isActive])
  @@index([nextExecution])
  @@unique([tenantId, name])
}

model DataProcessingActivity {
  id                  String      @id @default(cuid())
  name                String      // "User Registration", "Newsletter", etc.
  description         String
  purpose             String      // Purpose of processing
  legalBasis          LegalBasis  // RGPD legal basis
  dataCategories      String[]    // Types of personal data processed
  dataSubjects        String[]    // Categories of data subjects
  recipients          String[]    // Who receives the data
  thirdCountries      String[]    // Countries where data is transferred
  retentionPeriod     String      // How long data is kept
  securityMeasures    String[]    // Technical and organizational measures
  
  isActive            Boolean     @default(true)
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  tenantId            String
  tenant              Tenant      @relation(fields: [tenantId], references: [id])
  
  @@index([tenantId])
  @@index([isActive])
  @@unique([tenantId, name])
}

model PrivacyPolicy {
  id          String      @id @default(cuid())
  version     String      // "1.0", "2.1", etc.
  title       String
  content     String      @db.Text
  summary     String?     // Brief summary of changes
  isActive    Boolean     @default(false)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  tenantId    String?     // Null for global policy
  tenant      Tenant?     @relation(fields: [tenantId], references: [id])
  
  @@index([tenantId])
  @@index([isActive])
  @@index([version])
  @@unique([tenantId, version])
}

model DataBreach {
  id                  String          @id @default(cuid())
  title               String
  description         String          @db.Text
  severity            BreachSeverity
  status              BreachStatus    @default(DETECTED)
  
  // Breach details
  detectedAt          DateTime        @default(now())
  occurredAt          DateTime?       // When the breach actually happened
  containedAt         DateTime?       // When breach was contained
  resolvedAt          DateTime?       // When breach was fully resolved
  
  // Affected data
  affectedRecords     Int?            // Number of records affected
  dataTypes           String[]        // Types of data involved
  affectedUsers       String[]        // User IDs affected (if known)
  
  // Response actions
  notificationSent    Boolean         @default(false)
  authoritiesNotified Boolean         @default(false)
  usersNotified       Boolean         @default(false)
  
  // Investigation
  rootCause           String?
  mitigationSteps     String[]        @default([])
  preventionMeasures  String[]        @default([])
  
  // Reporting
  reportedBy          String?         // User ID who reported
  assignedTo          String?         // User ID assigned to handle
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  
  tenantId            String
  tenant              Tenant          @relation(fields: [tenantId], references: [id])
  
  @@index([tenantId])
  @@index([severity])
  @@index([status])
  @@index([detectedAt])
}

// --------------- GDPR/RGPD ENUMS ---------------

enum ConsentPurpose {
  ESSENTIAL       // Essential for service operation
  ANALYTICS       // Website analytics
  MARKETING       // Marketing communications
  PERSONALIZATION // Personalized content
  THIRD_PARTY     // Third-party integrations
  COOKIES         // Non-essential cookies
  PROFILING       // Automated decision making
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  ANONYMIZE
  CONSENT_GRANTED
  CONSENT_REVOKED
  DATA_REQUEST
  POLICY_ACCEPTED
}

enum AuditSeverity {
  LOW
  INFO
  MEDIUM
  HIGH
  CRITICAL
}

enum AuditCategory {
  DATA_ACCESS
  DATA_MODIFICATION
  AUTHENTICATION
  AUTHORIZATION
  CONSENT_MANAGEMENT
  DATA_EXPORT
  SYSTEM_ADMIN
  PRIVACY_RIGHTS
}

enum DataSubjectRequestType {
  ACCESS          // Right to access (Art. 15)
  RECTIFICATION   // Right to rectification (Art. 16)
  ERASURE         // Right to erasure/be forgotten (Art. 17)
  RESTRICTION     // Right to restriction (Art. 18)
  PORTABILITY     // Right to data portability (Art. 20)
  OBJECTION       // Right to object (Art. 21)
  WITHDRAW_CONSENT // Withdraw consent (Art. 7)
}

enum LegalBasis {
  CONSENT         // Art. 6(1)(a) - Consent
  CONTRACT        // Art. 6(1)(b) - Contract performance
  LEGAL_OBLIGATION // Art. 6(1)(c) - Legal obligation
  VITAL_INTERESTS // Art. 6(1)(d) - Vital interests
  PUBLIC_TASK     // Art. 6(1)(e) - Public task
  LEGITIMATE_INTERESTS // Art. 6(1)(f) - Legitimate interests
}

enum BreachSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BreachStatus {
  DETECTED
  INVESTIGATING
  CONTAINED
  RESOLVED
  REPORTED
}
