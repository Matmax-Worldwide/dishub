generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ContactFormSubmission {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  createdAt DateTime @default(now())
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  password        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  firstName       String
  lastName        String
  phoneNumber     String?
  bio             String?
  department      String?
  isActive        Boolean        @default(true)
  position        String?
  profileImageUrl String?
  roleId          String?
  role            RoleModel?     @relation(fields: [roleId], references: [id])
  accounts        Account[]
  appointments    Appointment[]
  clients         Client[]
  documents       Document[]
  notifications   Notification[]
  performances    Performance[]
  projects        Project[]
  sessions        Session[]
  tasksAssigned   Task[]         @relation("TaskAssignee")
  tasksCreated    Task[]         @relation("TaskCreator")
  timeEntries     TimeEntry[]
  settings        UserSettings?
  employee        Employee?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Document {
  id          String         @id @default(cuid())
  title       String
  description String?
  fileUrl     String?
  status      DocumentStatus @default(DRAFT)
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Client {
  id           String        @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects     Project[]
}

model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  clientId    String?
  userId      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  client      Client?       @relation(fields: [clientId], references: [id])
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks       Task[]
  timeEntries TimeEntry[]
}

model Appointment {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  location    String?
  isVirtual   Boolean  @default(false)
  meetingUrl  String?
  userId      String
  clientId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  client      Client?  @relation(fields: [clientId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(NOT_STARTED)
  dueDate     DateTime?
  priority    Int        @default(1)
  assigneeId  String
  creatorId   String
  projectId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assignee    User       @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id])
  project     Project?   @relation(fields: [projectId], references: [id])
}

model TimeEntry {
  id          String   @id @default(cuid())
  date        String
  hours       Float
  description String
  userId      String
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project? @relation(fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id              String           @id @default(cuid())
  type            NotificationType
  title           String
  message         String
  isRead          Boolean          @default(false)
  userId          String
  relatedItemId   String?
  relatedItemType String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Performance {
  id             String   @id @default(cuid())
  userId         String
  period         String
  completedTasks Int
  totalHours     Float
  efficiency     Float?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  emailNotifications Boolean  @default(true)
  theme              String   @default("light")
  language           String   @default("en")
  timeFormat         String   @default("12h")
  dateFormat         String   @default("MM/DD/YYYY")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HelpArticle {
  id        String   @id @default(cuid())
  title     String
  content   String
  category  String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RoleModel {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRoleModel")
  users       User[]

  @@map("RoleTable")
}

model Permission {
  id          String      @id @default(cuid())
  name        String      @unique
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  roles       RoleModel[] @relation("PermissionToRoleModel")
}

model ExternalLink {
  id              String            @id @default(cuid())
  name            String
  url             String
  icon            String
  description     String?
  isActive        Boolean           @default(true)
  order           Int               @default(0)
  createdBy       String
  accessType      AccessControlType @default(PUBLIC)
  allowedRoles    String[]          @default([])
  allowedUsers    String[]          @default([])
  deniedUsers     String[]          @default([])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

enum DocumentStatus {
  DRAFT
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum NotificationType {
  DOCUMENT
  TASK
  APPOINTMENT
  SYSTEM
}

model Employee {
  id               String             @id @default(cuid())
  employeeId       String             @unique
  userId           String             @unique
  dateOfBirth      DateTime?
  gender           String?
  maritalStatus    String?
  nationality      String?
  address          String?
  emergencyContact String?
  hireDate         DateTime
  terminationDate  DateTime?
  status           EmployeeStatus     @default(ACTIVE)
  departmentId     String
  positionId       String
  managerId        String?
  salary           Float
  bankInfo         String?
  taxInfo          String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  department       Department         @relation(fields: [departmentId], references: [id])
  position         Position           @relation(fields: [positionId], references: [id])
  manager          Employee?          @relation("EmployeeToManager", fields: [managerId], references: [id])
  subordinates     Employee[]         @relation("EmployeeToManager")
  attendances      Attendance[]
  leaves           Leave[]
  benefits         EmployeeBenefit[]
  performances     PerformanceReview[]
  documents        EmployeeDocument[]
  trainings        EmployeeTraining[]
  payrolls         Payroll[]
}

model Department {
  id          String     @id @default(cuid())
  name        String
  description String?
  managerId   String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[]
}

model Position {
  id               String     @id @default(cuid())
  title            String
  description      String?
  salaryRangeMin   Float?
  salaryRangeMax   Float?
  isRemoteEligible Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  employees        Employee[]
}

model Attendance {
  id         String   @id @default(cuid())
  employeeId String
  date       DateTime
  timeIn     DateTime
  timeOut    DateTime?
  status     String
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Leave {
  id           String       @id @default(cuid())
  employeeId   String
  leaveType    LeaveType
  startDate    DateTime
  endDate      DateTime
  totalDays    Float
  reason       String?
  status       RequestStatus @default(PENDING)
  attachments  String?
  approvedById String?
  approvedAt   DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  employee     Employee     @relation(fields: [employeeId], references: [id])
}

model Benefit {
  id                String             @id @default(cuid())
  name              String
  description       String?
  type              BenefitType
  eligibilityMonths Int               @default(0)
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  employeeBenefits  EmployeeBenefit[]
}

model EmployeeBenefit {
  id           String          @id @default(cuid())
  employeeId   String
  benefitId    String
  startDate    DateTime
  endDate      DateTime?
  status       RequestStatus   @default(ACTIVE)
  notes        String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  employee     Employee        @relation(fields: [employeeId], references: [id])
  benefit      Benefit         @relation(fields: [benefitId], references: [id])
}

model PerformanceReview {
  id              String   @id @default(cuid())
  employeeId      String
  reviewerId      String
  reviewDate      DateTime
  reviewPeriodStart DateTime
  reviewPeriodEnd   DateTime
  performanceScore Float
  qualityScore     Float
  attendanceScore  Float
  communicationScore Float
  leadershipScore   Float?
  strengths        String?
  areasToImprove   String?
  goals            String?
  comments         String?
  employeeComments String?
  status           ReviewStatus @default(DRAFT)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  employee         Employee     @relation(fields: [employeeId], references: [id])
}

model EmployeeDocument {
  id          String       @id @default(cuid())
  employeeId  String
  title       String
  description String?
  documentUrl String
  documentType DocumentType
  expiryDate  DateTime?
  isVerified  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  employee    Employee     @relation(fields: [employeeId], references: [id])
}

model Training {
  id          String             @id @default(cuid())
  title       String
  description String?
  type        TrainingType
  duration    Int
  durationUnit String
  provider    String?
  cost        Float?
  isRequired  Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  employees   EmployeeTraining[]
}

model EmployeeTraining {
  id           String        @id @default(cuid())
  employeeId   String
  trainingId   String
  startDate    DateTime
  completionDate DateTime?
  status       TrainingStatus @default(ASSIGNED)
  score        Float?
  certificate  String?
  feedback     String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  employee     Employee      @relation(fields: [employeeId], references: [id])
  training     Training      @relation(fields: [trainingId], references: [id])
}

model HolidayCalendar {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  description String?
  isRecurring Boolean  @default(false)
  country     String?
  region      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payroll {
  id            String       @id @default(cuid())
  employeeId    String
  periodStart   DateTime
  periodEnd     DateTime
  basicSalary   Float
  overtime      Float?
  bonus         Float?
  allowances    Float?
  deductions    Float?
  taxes         Float?
  netSalary     Float
  paymentDate   DateTime?
  paymentMethod String?
  status        PayrollStatus @default(PENDING)
  notes         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  employee      Employee     @relation(fields: [employeeId], references: [id])
}

enum EmployeeStatus {
  ACTIVE
  PROBATION
  LEAVE
  SUSPENDED
  TERMINATED
}

enum LeaveType {
  ANNUAL
  SICK
  MATERNITY
  PATERNITY
  UNPAID
  BEREAVEMENT
  STUDY
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
  CANCELLED
}

enum ReviewStatus {
  DRAFT
  SUBMITTED
  ACKNOWLEDGED
  COMPLETED
}

enum DocumentType {
  IDENTITY
  EDUCATION
  CERTIFICATE
  CONTRACT
  VISA
  OTHER
}

enum TrainingType {
  ONBOARDING
  TECHNICAL
  SOFT_SKILLS
  COMPLIANCE
  LEADERSHIP
  SAFETY
  OTHER
}

enum TrainingStatus {
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

enum BenefitType {
  HEALTH_INSURANCE
  LIFE_INSURANCE
  PENSION
  MEAL_ALLOWANCE
  TRANSPORTATION
  EDUCATION
  WELLNESS
  CHILDCARE
  OTHER
}

enum PayrollStatus {
  PENDING
  PROCESSED
  PAID
  CANCELLED
}

// CMS Models
model Page {
  id            String         @id @default(cuid())
  title         String
  slug          String         @unique
  description   String?
  isPublished   Boolean        @default(false)
  publishDate   DateTime?
  featuredImage String?
  metaTitle     String?
  metaDescription String?
  createdById   String
  updatedById   String?
  parentId      String?
  order         Int            @default(0)
  pageType      PageType       @default(CONTENT)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  parent        Page?          @relation("PageToPage", fields: [parentId], references: [id])
  children      Page[]         @relation("PageToPage")
  sections      PageSection[]
  seo           PageSEO?
}

model PageSection {
  id             String         @id @default(cuid())
  pageId         String
  title          String?
  content        String?
  componentType  ComponentType
  order          Int            @default(0)
  isVisible      Boolean        @default(true)
  configuration  Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  page           Page           @relation(fields: [pageId], references: [id], onDelete: Cascade)
  media          Media[]
}

model Media {
  id             String         @id @default(cuid())
  title          String?
  description    String?
  fileUrl        String
  fileName       String
  fileSize       Int?
  fileType       String?
  altText        String?
  pageSectionId  String?
  uploadedById   String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  pageSection    PageSection?   @relation(fields: [pageSectionId], references: [id])
}

model PageSEO {
  id              String     @id @default(cuid())
  pageId          String     @unique
  title           String?
  description     String?
  keywords        String?
  ogTitle         String?
  ogDescription   String?
  ogImage         String?
  twitterTitle    String?
  twitterDescription String?
  twitterImage    String?
  canonicalUrl    String?
  structuredData  Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  page            Page       @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Menu {
  id             String     @id @default(cuid())
  name           String     @unique
  location       String?
  items          MenuItem[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model MenuItem {
  id             String     @id @default(cuid())
  menuId         String
  parentId       String?
  title          String
  url            String?
  pageId         String?
  target         String?    @default("_self")
  icon           String?
  order          Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  menu           Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
  parent         MenuItem?  @relation("MenuItemToMenuItem", fields: [parentId], references: [id])
  children       MenuItem[] @relation("MenuItemToMenuItem")
}

model SiteSettings {
  id                String    @id @default(cuid())
  siteName          String
  siteDescription   String?
  logoUrl           String?
  faviconUrl        String?
  primaryColor      String?
  secondaryColor    String?
  googleAnalyticsId String?
  facebookPixelId   String?
  customCss         String?
  customJs          String?
  contactEmail      String?
  contactPhone      String?
  address           String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum PageType {
  HOME
  CONTENT
  BLOG
  LANDING
  CONTACT
  SERVICES
  ABOUT
  CUSTOM
}

enum ComponentType {
  HERO
  TEXT
  IMAGE
  GALLERY
  VIDEO
  FORM
  CARDS
  TESTIMONIALS
  CTA
  FAQ
  FEATURES
  PRICING
  TEAM
  BENEFITS
  CONTACT
  SERVICES
  CUSTOM
}

enum AccessControlType {
  PUBLIC
  ROLES
  USERS
  MIXED
}

// Modelo para permisos específicos por usuario
model UserPermission {
  id             String   @id @default(cuid())
  userId         String
  permissionName String
  granted        Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Definir una clave única para evitar duplicados
  @@unique([userId, permissionName])
  // Índice para búsquedas rápidas
  @@index([userId])
  @@index([permissionName])
}
